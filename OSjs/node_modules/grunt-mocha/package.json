{
  "_args": [
    [
      {
        "raw": "grunt-mocha@^1.0.2",
        "scope": null,
        "escapedName": "grunt-mocha",
        "name": "grunt-mocha",
        "rawSpec": "^1.0.2",
        "spec": ">=1.0.2 <2.0.0",
        "type": "range"
      },
      "/SHMC/OSjs"
    ]
  ],
  "_from": "grunt-mocha@>=1.0.2 <2.0.0",
  "_id": "grunt-mocha@1.0.4",
  "_inCache": true,
  "_location": "/grunt-mocha",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/grunt-mocha-1.0.4.tgz_1485770010060_0.14532008999958634"
  },
  "_npmUser": {
    "name": "disqus",
    "email": "opensource@disqus.com"
  },
  "_npmVersion": "2.15.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "grunt-mocha@^1.0.2",
    "scope": null,
    "escapedName": "grunt-mocha",
    "name": "grunt-mocha",
    "rawSpec": "^1.0.2",
    "spec": ">=1.0.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/grunt-mocha/-/grunt-mocha-1.0.4.tgz",
  "_shasum": "ee261dc66a03002e0caa42cb7fd41d16b2956abd",
  "_shrinkwrap": null,
  "_spec": "grunt-mocha@^1.0.2",
  "_where": "/SHMC/OSjs",
  "author": {
    "name": "Kelly Miyashiro",
    "email": "miyashiro.kelly@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/disqus/grunt-mocha/issues"
  },
  "contributors": [
    {
      "name": "Kelly Miyashiro",
      "email": "miyashiro.kelly@gmail.com"
    },
    {
      "name": "Tony Narlock",
      "email": "tony@git-pull.com"
    }
  ],
  "dependencies": {
    "grunt-lib-phantomjs": "^1.0.2",
    "lodash": "^3.9.0",
    "mocha": ">=2.5.3"
  },
  "description": "Grunt task for running client-side Mocha specs in PhantomJS",
  "devDependencies": {
    "chai": "^3.4.1",
    "grunt": "~0.4",
    "grunt-contrib-connect": "~0.2",
    "grunt-contrib-jshint": "~0.3",
    "mocha": ">=2.5.3"
  },
  "directories": {},
  "dist": {
    "shasum": "ee261dc66a03002e0caa42cb7fd41d16b2956abd",
    "tarball": "https://registry.npmjs.org/grunt-mocha/-/grunt-mocha-1.0.4.tgz"
  },
  "engines": {
    "node": "*"
  },
  "files": [
    "growl",
    "phantomjs",
    "support",
    "tasks"
  ],
  "gitHead": "d551a6a2a04fca72bdf057d9831b91b4c6770290",
  "homepage": "https://github.com/disqus/grunt-mocha",
  "keywords": [
    "gruntplugin",
    "mocha",
    "test",
    "phantomjs"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/disqus/grunt-mocha/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "maintainers": [
    {
      "name": "Disqus Inc.",
      "email": "opensource@disqus.com",
      "url": "https://github.com/disqus/"
    }
  ],
  "name": "grunt-mocha",
  "optionalDependencies": {},
  "peerDependencies": {
    "grunt": ">=0.4.0"
  },
  "readme": "# grunt-mocha [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url]\n\n> Automatically run *client-side* mocha specs via grunt/mocha/PhantomJS\n\nFor a grunt task for server-side mocha tests, see [grunt-mocha-test](https://github.com/pghalliday/grunt-mocha-test) or [grunt-simple-mocha](https://github.com/yaymukund/grunt-simple-mocha)\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`. Use a `0.1.x` tag of this plugin to use with Grunt `~0.3.0`.\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-mocha --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-mocha');\n```\n\n## Mocha task\n_Run this task with the `grunt mocha` command._\n\n### Settings\n\n#### files/src\n\nType: `String|Array`\n\nThis defines which HTML spec files to run using PhantomJS. These are the same files you would open to run tests in a browser.\n\nThere are a number of options available. Please review the [minimatch options here](https://github.com/isaacs/minimatch#options).\n\nExample:\n```js\nmocha: {\n  test: {\n    src: ['tests/**/*.html'],\n  },\n},\n```\n\n#### dest\nType: `String`\nDefault: `undefined`\n\nWrite reporter output to a file. Useful if you need a file to feed your CI bot.\n\nExample:\n```js\nmocha: {\n  test: {\n    options: {\n      reporter: 'XUnit'\n    },\n    src: ['tests/**/*.html'],\n    dest: './test/output/xunit.out',\n  },\n},\n```\n\n#### options.run\nType: `Boolean`\nDefault: `true`\n\ngrunt-mocha injects a script into the PhantomJS instance that loads your HTML spec files. The file sets up a reporter and listeners so the output can be output in the command line. This option will call `mocha.run()` after the script is injected, ensuring that the proper listeners are setup.\n\nYou may want to set this to false if your files are loaded asynchronously via AMD and call `mocha.run` in your own callback.\n\nIn HTML spec:\n```html\n<!-- run mocha after all test are loaded -->\n<script type=\"text/javascript\" charset=\"utf-8\">\n  // Only tests run in real browser, injected script run if options.run == true\n  if (navigator.userAgent.indexOf('PhantomJS') < 0) {\n    mocha.run();\n  }\n</script>\n```\n\nGruntfile:\n```js\nmocha: {\n  test: {\n    src: ['tests/**/*.html'],\n    options: {\n      run: true,\n    },\n  },\n},\n```\n\n#### options.urls\nType: `Array|String`\nDefault: `[]`\n\nInstead of files, hit these URLs. Usually used in conjunction with the connect task to spin up a server for testing.\n\n```js\nconnect: {\n  server: {\n    options: {\n      port: 8888,\n      base: '.',\n    },\n  },\n},\nmocha: {\n  test: {\n    options: {\n      urls: [ 'http://localhost:8888/example/test/test2.html' ],\n    },\n  },\n},\n```\n\nThen run:\n```\ngrunt connect mocha\n```\n\n#### options.timeout\nType: `Number`\nDefault: `5000`\n\nPhantomJS timeout in milliseconds. If nothing happens within 5 seconds, exit.\n\nExample:\n```js\nmocha: {\n  test: {\n    src: ['tests/**/*.html'],\n    options: {\n      timeout: 10000,\n    },\n  },\n},\n```\n\n#### options.bail\nType: `Boolean`\nDefault: `false`\n\nCall `grunt.warn` and exit the grunt task on the first failed test. This only calls `grunt.warn` after the entire spec file is finished.\n\nExample:\n```js\nmocha: {\n  test: {\n    src: ['tests/**/*.html'],\n    options: {\n      bail: true,\n    },\n  },\n},\n```\n\n#### options.growlOnSuccess\nType: `Boolean`\nDefault: `true`\n\nDisplay a Growl notification when all tests successfully pass.\n\nExample:\n```js\nmocha: {\n  test: {\n    src: ['tests/**/*.html'],\n    options: {\n      growlOnSuccess: false,\n    },\n  },\n},\n```\n\n#### options.log\nType: `Boolean`\nDefault: `false`\n\nPrint any `console.log` calls from PhantomJS to the command line. Only used for very quick and dirty debugging. It is highly recommended that you open the failing spec file in a browser so you can use much richer debugging tools.\n\nExample:\n```js\nmocha: {\n  test: {\n    src: ['tests/**/*.html'],\n    options: {\n      log: true,\n    },\n  },\n},\n```\n\n#### options.logErrors\nType: `Boolean`\nDefault: `false`\n\nFail and output script errors.\n\nExample:\n```js\nmocha: {\n  test: {\n    src: ['tests/**/*.html'],\n    options: {\n      logErrors: true,\n    },\n  },\n},\n```\n\n#### options.mocha\nType: `Object`\n\nA mocha options simple object. Very few options are currently supported. Actually, I think `grep` is the only one.\n\nExample:\n```js\nmocha: {\n  test: {\n    src: ['tests/**/*.html'],\n    options: {\n      mocha: {\n        grep: 'router*'\n      }\n    }\n  },\n},\n```\n\n#### options.reporter\nType: `String`\nDefault: `'Dot'`\n\nThe reporter to use. **Note:** XUnit and those types of reporters should probably use the `dest` option.\n\nExample:\n```js\nmocha: {\n  test: {\n    files: ['tests/**/*.html'],\n    options: {\n      reporter: 'Nyan',\n    }\n  },\n},\n```\n\nCustom reporter example:\nExample:\n```js\nmocha: {\n  test: {\n    files: ['tests/**/*.html'],\n    options {\n      reporter: './path/to/custom/reporter', // included via require\n    },\n  },\n},\n```\n\n### options.page\nType: `Object`\n\nSet properties in the PhantomJS webpage instance used for tests, see http://phantomjs.org/api/webpage/\n\nExample:\n```js\nmocha: {\n  test: {\n    options: {\n      page: {\n        settings: {\n          webSecurityEnabled: false,  // disable cors checks in phantomjs\n        },  \n      },\n    },\n  },\n},\n```\n\n## Hacks\n\nThe PhantomJS -> Grunt superdimensional conduit uses `alert`. If you have disabled or aliased alert in your app, this won't work. I have conveniently set a global `PHANTOMJS` on `window` so you can conditionally override alert in your app.\n\n## Examples\n\n### Vanilla JS\n\n#### Option 1 (recommended)\n\n- Write mocha task description in grunt config using and specify `run: true` option (see [this task's Gruntfile.js](Gruntfile.js) for details);\n- Check for PhantomJS `userAgent` in a test html file and run tests only in a real browser (see [test2.html](example/test/test2.html) for details).\n\nIn this case you shouldn't include [bridge.js](phantomjs/bridge.js) (it will be included automatically) and tests will be run from [bridge.js](phantomjs/bridge.js).\n\n#### Option 2\n\nAlternatively, include `bridge.js` from `tasks/phantomjs` after you include `mocha.js` and run `mocha.setup` in your HTML file. The helper will override `mocha.setup` if it detects PhantomJS. See [test.html](example/test/test.html).\n\n### AMD\n\nMocha **must** be included via script tag in the header. There is no need to load Mocha via AMD. You may load other testing libs via AMD if that gives you a fuzzy feeling.\n\nExample setup with AMD (advanced): https://gist.github.com/2655876\n\n## License\nLicensed under the MIT license.\n\n[npm-image]: https://img.shields.io/npm/v/grunt-mocha.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/grunt-mocha\n[travis-image]: https://img.shields.io/travis/disqus/grunt-mocha/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/disqus/grunt-mocha\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/disqus/grunt-mocha.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "1.0.4"
}
